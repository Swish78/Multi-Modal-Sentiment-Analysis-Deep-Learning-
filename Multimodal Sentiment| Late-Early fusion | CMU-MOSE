{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9635706,"sourceType":"datasetVersion","datasetId":5621994}],"dockerImageVersionId":30886,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pickle\n\ndef load_pickle(file_path):\n    with open(file_path, \"rb\") as f:\n        data = pickle.load(f)\n    return data\n\npath= '/kaggle/input/cmu-mosei/unaligned_50.pkl'\n\ndata = load_pickle(path)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:43:16.651851Z","iopub.execute_input":"2025-02-20T23:43:16.652143Z","iopub.status.idle":"2025-02-20T23:44:10.720966Z","shell.execute_reply.started":"2025-02-20T23:43:16.652120Z","shell.execute_reply":"2025-02-20T23:44:10.720156Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"type(data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:44:43.530777Z","iopub.execute_input":"2025-02-20T23:44:43.531093Z","iopub.status.idle":"2025-02-20T23:44:43.536393Z","shell.execute_reply.started":"2025-02-20T23:44:43.531067Z","shell.execute_reply":"2025-02-20T23:44:43.535773Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"dict"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"len(data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:44:44.148972Z","iopub.execute_input":"2025-02-20T23:44:44.149229Z","iopub.status.idle":"2025-02-20T23:44:44.153908Z","shell.execute_reply.started":"2025-02-20T23:44:44.149208Z","shell.execute_reply":"2025-02-20T23:44:44.153260Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"3"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"data['train'].keys()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:44:44.862099Z","iopub.execute_input":"2025-02-20T23:44:44.862378Z","iopub.status.idle":"2025-02-20T23:44:44.867211Z","shell.execute_reply.started":"2025-02-20T23:44:44.862354Z","shell.execute_reply":"2025-02-20T23:44:44.866461Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"dict_keys(['raw_text', 'audio', 'vision', 'id', 'text', 'text_bert', 'audio_lengths', 'vision_lengths', 'annotations', 'classification_labels', 'regression_labels'])"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"data['train'].values()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data['test'].keys()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:45:03.060358Z","iopub.execute_input":"2025-02-20T23:45:03.060627Z","iopub.status.idle":"2025-02-20T23:45:03.065289Z","shell.execute_reply.started":"2025-02-20T23:45:03.060606Z","shell.execute_reply":"2025-02-20T23:45:03.064454Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"dict_keys(['raw_text', 'audio', 'vision', 'id', 'text', 'text_bert', 'audio_lengths', 'vision_lengths', 'annotations', 'classification_labels', 'regression_labels'])"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"data['valid'].keys()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:45:03.464647Z","iopub.execute_input":"2025-02-20T23:45:03.464897Z","iopub.status.idle":"2025-02-20T23:45:03.469117Z","shell.execute_reply.started":"2025-02-20T23:45:03.464877Z","shell.execute_reply":"2025-02-20T23:45:03.468340Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"dict_keys(['raw_text', 'audio', 'vision', 'id', 'text', 'text_bert', 'audio_lengths', 'vision_lengths', 'annotations', 'classification_labels', 'regression_labels'])"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"train_size = len(data[\"train\"][\"raw_text\"])\ntest_size = len(data[\"test\"][\"raw_text\"])\nval_size = len(data[\"valid\"][\"raw_text\"])\nprint(f\"Train Rows: {train_size}, Test Rows: {test_size}, Validation Rows: {val_size}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:45:03.878076Z","iopub.execute_input":"2025-02-20T23:45:03.878300Z","iopub.status.idle":"2025-02-20T23:45:03.883098Z","shell.execute_reply.started":"2025-02-20T23:45:03.878281Z","shell.execute_reply":"2025-02-20T23:45:03.882294Z"}},"outputs":[{"name":"stdout","text":"Train Rows: 16326, Test Rows: 4659, Validation Rows: 1871\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"for key, values in data['train'].items():\n    print(f\"{key}: {type(values)}, \")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:45:04.351737Z","iopub.execute_input":"2025-02-20T23:45:04.351980Z","iopub.status.idle":"2025-02-20T23:45:04.356899Z","shell.execute_reply.started":"2025-02-20T23:45:04.351961Z","shell.execute_reply":"2025-02-20T23:45:04.355402Z"}},"outputs":[{"name":"stdout","text":"raw_text: <class 'numpy.ndarray'>, \naudio: <class 'numpy.ndarray'>, \nvision: <class 'numpy.ndarray'>, \nid: <class 'list'>, \ntext: <class 'numpy.ndarray'>, \ntext_bert: <class 'numpy.ndarray'>, \naudio_lengths: <class 'list'>, \nvision_lengths: <class 'list'>, \nannotations: <class 'list'>, \nclassification_labels: <class 'numpy.ndarray'>, \nregression_labels: <class 'numpy.ndarray'>, \n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"data['train']['vision']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:45:06.146281Z","iopub.execute_input":"2025-02-20T23:45:06.146547Z","iopub.status.idle":"2025-02-20T23:45:06.153086Z","shell.execute_reply.started":"2025-02-20T23:45:06.146527Z","shell.execute_reply":"2025-02-20T23:45:06.152410Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"array([[[ -1.21082997,  -0.46178699,  -0.51150799, ...,   2.28578997,\n          19.25449944,  -1.83406997],\n        [ -1.46630001,  -0.605802  ,  -0.63063502, ...,   1.04263997,\n          19.59289932,  -1.57695997],\n        [ -1.66624999,  -0.286722  ,  -0.71854699, ...,  -0.39830101,\n          20.09429932,  -1.32193995],\n        ...,\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ],\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ],\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ]],\n\n       [[ -1.78582001,  -0.63808399,   0.74307901, ...,  -0.939619  ,\n          21.28389931,  -0.99572998],\n        [ -1.81684005,  -0.69895202,   0.76330298, ...,  -0.35126901,\n          21.37739944,  -1.46116996],\n        [ -1.48545003,  -0.32383499,   0.18769699, ...,   1.04356003,\n          20.34189987,  -1.40414   ],\n        ...,\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ],\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ],\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ]],\n\n       [[ -1.76420999,  -0.79585999,  -0.95634502, ...,   2.32343006,\n          16.59189987,  -0.368081  ],\n        [ -1.88461006,  -0.70563501,  -1.14979005, ...,   2.24125004,\n          16.35880089,  -0.602651  ],\n        [ -1.68855   ,  -0.265791  ,  -1.1099    , ...,   2.18597007,\n          16.14439964,  -0.52256   ],\n        ...,\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ],\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ],\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ]],\n\n       ...,\n\n       [[ -0.391785  ,  -0.033968  ,  -1.38229001, ...,   3.98262   ,\n         -14.96930027,   6.81540012],\n        [ -0.55107898,   0.288073  ,  -1.10002995, ...,   1.91916001,\n         -14.45079994,   7.20722008],\n        [ -1.23492002,   0.91622603,  -1.43216002, ...,   3.52051997,\n         -15.73400021,  10.44369984],\n        ...,\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ],\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ],\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ]],\n\n       [[ -2.32725   ,  -1.11717999,   0.27551001, ..., -11.2901001 ,\n           6.01247978,   5.31969023],\n        [ -2.22472   ,  -2.05604005,   1.18822002, ...,  -9.90400982,\n           5.6802001 ,   5.05389023],\n        [ -2.17180991,  -3.01132011,   1.49568999, ...,  -5.44544983,\n           3.25935006,   6.92773008],\n        ...,\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ],\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ],\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ]],\n\n       [[ -1.82432997,  -0.0617107 ,  -0.83865601, ...,   3.79540992,\n         -11.95359993,  -1.43640995],\n        [ -1.94595003,  -0.0762518 ,  -0.75050199, ...,   4.19941998,\n         -12.16289997,  -1.34232998],\n        [ -1.96231997,  -0.0479196 ,  -0.78334802, ...,   3.80429006,\n         -13.0060997 ,  -1.40899003],\n        ...,\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ],\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ],\n        [  0.        ,   0.        ,   0.        , ...,   0.        ,\n           0.        ,   0.        ]]])"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"import pandas as pd","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:45:15.025911Z","iopub.execute_input":"2025-02-20T23:45:15.026373Z","iopub.status.idle":"2025-02-20T23:45:15.029839Z","shell.execute_reply.started":"2025-02-20T23:45:15.026349Z","shell.execute_reply":"2025-02-20T23:45:15.029056Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"from datasets import Dataset, DatasetDict","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:45:15.879896Z","iopub.execute_input":"2025-02-20T23:45:15.880150Z","iopub.status.idle":"2025-02-20T23:45:15.883556Z","shell.execute_reply.started":"2025-02-20T23:45:15.880129Z","shell.execute_reply":"2025-02-20T23:45:15.882929Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"# train_dataset = Dataset.from_dict(data[\"train\"])\n# test_dataset = Dataset.from_dict(data[\"test\"])\n# val_dataset = Dataset.from_dict(data[\"val\"])\n\n# dataset_dict = DatasetDict({\n#     \"train\": train_dataset,\n#     \"test\": test_dataset,\n#     \"val\": val_dataset\n# })\n\n# print(dataset_dict)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-20T23:42:40.228Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def save_dict_to_csv(data, filename):\n    for key in data:\n        data[key] = [str(item) if isinstance(item, (list, dict)) else item for item in data[key]]\n    \n    df = pd.DataFrame(data)\n    df.to_csv(filename, index=False)  \n    print(f\"Saved: {filename}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:45:18.294629Z","iopub.execute_input":"2025-02-20T23:45:18.294991Z","iopub.status.idle":"2025-02-20T23:45:18.299748Z","shell.execute_reply.started":"2025-02-20T23:45:18.294962Z","shell.execute_reply":"2025-02-20T23:45:18.298798Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# len(data['train']['audio'][0])\n# >>> 500\n# len(data['train']['audio'][0][0])\n# >>> 74\n\n# len(data['train']['vision'][0])\n# 500 \n# len(data['train']['vision'][0][0])\n# >>> 35","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-20T23:42:40.228Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"save_dict_to_csv(data[\"train\"], \"train.csv\")\nsave_dict_to_csv(data[\"test\"], \"test.csv\")\nsave_dict_to_csv(data[\"valid\"], \"val.csv\")","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-20T23:42:40.228Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_train = pd.read_csv('/kaggle/working/train.csv')","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-20T23:42:40.228Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_train.head(3)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-20T23:42:40.228Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_train.drop(['text', 'text_bert','audio_lengths','vision_lengths'], axis=1, inplace=True)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-20T23:42:40.228Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_train.head(2)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-20T23:42:40.229Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_test = pd.read_csv('/kaggle/working/test.csv')","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-20T23:42:40.229Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_test.drop(['text', 'text_bert','audio_lengths','vision_lengths'], axis=1, inplace=True)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-20T23:42:40.229Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_val = pd.read_csv('/kaggle/working/val.csv')","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-20T23:42:40.229Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_val.drop(['text', 'text_bert','audio_lengths','vision_lengths'], axis=1, inplace=True)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-20T23:42:40.229Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_train.to_csv('train_updated.csv', index=False)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-20T23:42:40.229Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"background: linear-gradient(135deg, #8B4513, #D2691E); padding: 20px; text-align: center; color: white; border-radius: 12px; box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.4), inset 0px 0px 12px rgba(255, 255, 255, 0.2);\">\n  <p style=\"font-size: 30px; font-weight: bold; font-family: 'Poppins', sans-serif; letter-spacing: 1px; text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.5);\">\n    Multimodal Sentiment Analysis\n  </p>\n</div>","metadata":{}},{"cell_type":"markdown","source":"### **📜 Premise for the Notebook**  \n\n**💡 Multimodal Sentiment Analysis: Bridging Text, Audio, and Vision for Emotion Understanding**  \n\nIn the modern AI landscape, sentiment analysis has evolved beyond simple text-based approaches. Human emotions are complex, and true sentiment understanding requires integrating multiple modalities—text, speech, and visual cues. This notebook explores **Multimodal Sentiment Analysis** using deep learning, leveraging state-of-the-art techniques to enhance emotion recognition accuracy.  \n\n#### **🌟 Why Multimodal Sentiment Analysis?**  \nTraditional sentiment analysis relies heavily on text, but real-world emotions are often **non-verbal**. A sarcastic statement, for instance, may carry a **positive textual meaning but a negative sentiment in tone and expression**. By fusing multiple data sources—**text, audio, and vision**—we create a robust model that captures hidden emotional signals.  \n\n#### **🚀 What This Notebook Covers:**  \n1. **Data Preparation & Feature Extraction**  \n   - Text embeddings via **DistilBERT**  \n   - Audio features (MFCC, Spectrograms)  \n   - Vision features using **CNN-based encoders**  \n\n2. **Fusion Strategies for Sentiment Classification**  \n   - **Weighted Average Fusion** (simple yet effective)  \n   - **Deep Learning-based Fusion** (concatenation with fully connected layers)  \n   - **Machine Learning-based Fusion** (SVM, Decision Trees)  \n\n3. **Training & Evaluation**  \n   - Experiments with different fusion techniques  \n   - Performance comparison using metrics like **accuracy, F1-score, and confusion matrices**  \n","metadata":{}},{"cell_type":"markdown","source":"<div style=\"background: linear-gradient(135deg, #2E8B57, #3CB371); padding: 15px; text-align: center; color: white; border-radius: 8px; box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.2); margin-top: 15px;\">\n  <p style=\"font-size: 22px; font-weight: bold; font-family: 'Arial', sans-serif;\">\n    Importing Required Libraries\n  </p>\n</div>","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, Dataset\nfrom transformers import DistilBertModel, DistilBertTokenizer\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.ensemble import RandomForestClassifier\nimport matplotlib.pyplot as plt","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:45:32.464649Z","iopub.execute_input":"2025-02-20T23:45:32.465063Z","iopub.status.idle":"2025-02-20T23:45:53.655971Z","shell.execute_reply.started":"2025-02-20T23:45:32.465030Z","shell.execute_reply":"2025-02-20T23:45:53.655299Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# nlp = spacy.load(\"en_core_web_sm\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:11.878368Z","iopub.status.idle":"2025-02-20T23:48:12.116050Z","shell.execute_reply.started":"2025-02-20T23:48:11.879228Z","shell.execute_reply":"2025-02-20T23:48:12.114679Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-8d092272a28e>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnlp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspacy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"en_core_web_sm\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'spacy' is not defined"],"ename":"NameError","evalue":"name 'spacy' is not defined","output_type":"error"}],"execution_count":18},{"cell_type":"markdown","source":"<div style=\"background: linear-gradient(135deg, #4682B4, #1E90FF); padding: 15px; text-align: center; color: white; border-radius: 8px; box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.2); margin-top: 15px;\">\n  <p style=\"font-size: 22px; font-weight: bold; font-family: 'Arial', sans-serif;\">\n    Setting Constants and Hyperparameters\n  </p>\n</div>","metadata":{}},{"cell_type":"code","source":"torch.manual_seed(42)\nnp.random.seed(42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:24.752037Z","iopub.execute_input":"2025-02-20T23:48:24.752340Z","iopub.status.idle":"2025-02-20T23:48:24.760864Z","shell.execute_reply.started":"2025-02-20T23:48:24.752313Z","shell.execute_reply":"2025-02-20T23:48:24.760126Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"NUM_CLASSES = 3  # 0: negative, 1: neutral, 2: positive\nBATCH_SIZE = 32\nNUM_EPOCHS = 25\nLEARNING_RATE = 1e-4\nTEXT_HIDDEN_SIZE = 768 \nAUDIO_FEATURE_SIZE = 74\nVISION_FEATURE_SIZE = 35\nFUSION_HIDDEN_SIZE = 256        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-21T00:37:37.760875Z","iopub.execute_input":"2025-02-21T00:37:37.761222Z","iopub.status.idle":"2025-02-21T00:37:37.765262Z","shell.execute_reply.started":"2025-02-21T00:37:37.761193Z","shell.execute_reply":"2025-02-21T00:37:37.764449Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"tokenizer = DistilBertTokenizer.from_pretrained(\"distilbert-base-uncased\")\nbert_model = DistilBertModel.from_pretrained(\"distilbert-base-uncased\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:24.769861Z","iopub.execute_input":"2025-02-20T23:48:24.770115Z","iopub.status.idle":"2025-02-20T23:48:27.576014Z","shell.execute_reply.started":"2025-02-20T23:48:24.770087Z","shell.execute_reply":"2025-02-20T23:48:27.575376Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b5dd53e17eab4cfc8f291fa1660d2f8c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"aacf1000d1934dd0bc77a24559249f7a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"02617938abc64bf9b501dbf88928b928"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/483 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d6f939c34e03488bacac5cac1fd3025e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/268M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0c034bd6b0774cfb99f343e12ccd9cda"}},"metadata":{}}],"execution_count":21},{"cell_type":"markdown","source":"<div style=\"background: linear-gradient(135deg, #8A2BE2, #9400D3); padding: 15px; text-align: center; color: white; border-radius: 8px; box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.2); margin-top: 15px;\">\n  <p style=\"font-size: 22px; font-weight: bold; font-family: 'Arial', sans-serif;\">\n    Creating the Custom Dataset Class\n  </p>\n</div>","metadata":{}},{"cell_type":"code","source":"class MultimodalSentimentDataset(Dataset):\n    def __init__(self, data_dict, tokenizer, max_length=128):\n        self.raw_texts = data_dict['raw_text']\n        self.audio_features = data_dict['audio']\n        self.vision_features = data_dict['vision']\n        self.labels = data_dict['classification_labels']\n        self.ids = data_dict['id']\n        self.tokenizer = tokenizer\n        self.max_length = max_length\n        \n    def __len__(self):\n        return len(self.raw_texts)\n    \n    def __getitem__(self, idx):\n        raw_text = self.raw_texts[idx]\n        \n        encoding = self.tokenizer(\n            raw_text,\n            max_length=self.max_length,\n            padding='max_length',\n            truncation=True,\n            return_tensors='pt'\n        )\n        \n        input_ids = encoding['input_ids'].squeeze()\n        attention_mask = encoding['attention_mask'].squeeze()\n        \n        # Just using the first frame for saving time :(\n        audio_feature = torch.tensor(self.audio_features[idx][0], dtype=torch.float)\n        vision_feature = torch.tensor(self.vision_features[idx][0], dtype=torch.float)\n        label = torch.tensor(self.labels[idx], dtype=torch.long)\n        \n        return {\n            'input_ids': input_ids,\n            'attention_mask': attention_mask,\n            'audio_feature': audio_feature,\n            'vision_feature': vision_feature,\n            'label': label,\n            'id': self.ids[idx]\n        }","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:27.577092Z","iopub.execute_input":"2025-02-20T23:48:27.577303Z","iopub.status.idle":"2025-02-20T23:48:27.583129Z","shell.execute_reply.started":"2025-02-20T23:48:27.577283Z","shell.execute_reply":"2025-02-20T23:48:27.582493Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"class TextEncoder(nn.Module):\n    def __init__(self, freeze_bert=False):\n        super(TextEncoder, self).__init__()\n        self.distilbert = DistilBertModel.from_pretrained('distilbert-base-uncased')\n        if freeze_bert:\n            for param in self.distilbert.parameters():\n                param.requires_grad = False\n        self.dropout = nn.Dropout(0.1)\n        \n    def forward(self, input_ids, attention_mask):\n        outputs = self.distilbert(input_ids=input_ids, attention_mask=attention_mask)\n        pooled_output = outputs.last_hidden_state[:, 0]\n        return self.dropout(pooled_output)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:27.584771Z","iopub.execute_input":"2025-02-20T23:48:27.584995Z","iopub.status.idle":"2025-02-20T23:48:27.664269Z","shell.execute_reply.started":"2025-02-20T23:48:27.584960Z","shell.execute_reply":"2025-02-20T23:48:27.663465Z"}},"outputs":[],"execution_count":23},{"cell_type":"markdown","source":"<div style=\"background: linear-gradient(135deg, #FF5733, #C70039); padding: 15px; text-align: center; color: white; border-radius: 10px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3), inset 0px 0px 10px rgba(255, 255, 255, 0.2); margin-top: 20px;\">\n  <p style=\"font-size: 24px; font-weight: bold; font-family: 'Poppins', sans-serif; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.4);\">\n    🏗️ Building the Weighted Average Fusion Model\n  </p>\n</div>","metadata":{}},{"cell_type":"code","source":"class WeightedAverageFusion(nn.Module):\n    def __init__(self, text_model, text_hidden_size, audio_size, vision_size, num_classes):\n        super(WeightedAverageFusion, self).__init__()\n        self.text_model = text_model\n        \n        # Modality-specific classifiers\n        self.text_classifier = nn.Linear(text_hidden_size, num_classes)\n        self.audio_classifier = nn.Linear(audio_size, num_classes)\n        self.vision_classifier = nn.Linear(vision_size, num_classes)\n        \n        # Learnable weights for fusion\n        self.modality_weights = nn.Parameter(torch.tensor([0.4, 0.3, 0.3], dtype=torch.float))\n        self.softmax = nn.Softmax(dim=0)\n        \n    def forward(self, input_ids, attention_mask, audio_feature, vision_feature):\n        # Process text\n        text_output = self.text_model(input_ids=input_ids, attention_mask=attention_mask)\n        text_cls = text_output.last_hidden_state[:, 0, :]  # [CLS] token embedding\n        \n        # Get predictions from each modality\n        text_pred = self.text_classifier(text_cls)\n        audio_pred = self.audio_classifier(audio_feature)\n        vision_pred = self.vision_classifier(vision_feature)\n        \n        # Normalize weights\n        weights = self.softmax(self.modality_weights)\n        \n        # Weighted fusion\n        fused_output = (weights[0] * text_pred + \n                         weights[1] * audio_pred + \n                         weights[2] * vision_pred)\n        \n        return fused_output, text_pred, audio_pred, vision_pred, weights","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:27.665516Z","iopub.execute_input":"2025-02-20T23:48:27.665836Z","iopub.status.idle":"2025-02-20T23:48:27.678415Z","shell.execute_reply.started":"2025-02-20T23:48:27.665804Z","shell.execute_reply":"2025-02-20T23:48:27.677667Z"}},"outputs":[],"execution_count":24},{"cell_type":"markdown","source":"<div style=\"background: linear-gradient(135deg, #4682B4, #1E90FF); padding: 15px; text-align: center; color: white; border-radius: 10px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3), inset 0px 0px 10px rgba(255, 255, 255, 0.2); margin-top: 20px;\">\n  <p style=\"font-size: 24px; font-weight: bold; font-family: 'Poppins', sans-serif; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.4);\">\n    🎭 Implementing the Deep Learning Fusion Model\n  </p>\n</div>","metadata":{}},{"cell_type":"code","source":"class DeepFusionNetwork(nn.Module):\n    def __init__(self, text_model, text_hidden_size, audio_size, vision_size, fusion_hidden, num_classes):\n        super(DeepFusionNetwork, self).__init__()\n        self.text_model = text_model\n        \n        # Feature extractors\n        self.text_projector = nn.Linear(text_hidden_size, fusion_hidden)\n        self.audio_projector = nn.Linear(audio_size, fusion_hidden)\n        self.vision_projector = nn.Linear(vision_size, fusion_hidden)\n        \n        # Fusion layers\n        self.fusion_layer1 = nn.Linear(fusion_hidden * 3, fusion_hidden)\n        self.fusion_layer2 = nn.Linear(fusion_hidden, fusion_hidden // 2)\n        self.classifier = nn.Linear(fusion_hidden // 2, num_classes)\n        \n        # Activation and dropout\n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(0.3)\n        \n    def forward(self, input_ids, attention_mask, audio_feature, vision_feature):\n        # Process text\n        text_output = self.text_model(input_ids=input_ids, attention_mask=attention_mask)\n        text_cls = text_output.last_hidden_state[:, 0, :]  # [CLS] token embedding\n        \n        # Project each modality to common space\n        text_proj = self.relu(self.text_projector(text_cls))\n        audio_proj = self.relu(self.audio_projector(audio_feature))\n        vision_proj = self.relu(self.vision_projector(vision_feature))\n        \n        # Concatenate features\n        combined = torch.cat([text_proj, audio_proj, vision_proj], dim=1)\n        \n        # Fusion layers\n        fusion = self.relu(self.fusion_layer1(combined))\n        fusion = self.dropout(fusion)\n        fusion = self.relu(self.fusion_layer2(fusion))\n        fusion = self.dropout(fusion)\n        \n        # Classification\n        output = self.classifier(fusion)\n        \n        return output","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:27.679364Z","iopub.execute_input":"2025-02-20T23:48:27.679743Z","iopub.status.idle":"2025-02-20T23:48:27.693186Z","shell.execute_reply.started":"2025-02-20T23:48:27.679659Z","shell.execute_reply":"2025-02-20T23:48:27.692508Z"}},"outputs":[],"execution_count":25},{"cell_type":"markdown","source":"<div style=\"background: linear-gradient(135deg, #FFD700, #FFA500); padding: 15px; text-align: center; color: white; border-radius: 10px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3), inset 0px 0px 10px rgba(255, 255, 255, 0.2); margin-top: 20px;\">\n  <p style=\"font-size: 24px; font-weight: bold; font-family: 'Poppins', sans-serif; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.4);\">\n    🧠 Machine Learning Fusion using Extracted Features\n  </p>\n</div>","metadata":{}},{"cell_type":"code","source":"class MLFusionFeatureExtractor(nn.Module):\n    def __init__(self, text_model, text_hidden_size, audio_size, vision_size, num_classes):\n        super(MLFusionFeatureExtractor, self).__init__()\n        self.text_model = text_model\n        \n        # Modality-specific classifiers\n        self.text_classifier = nn.Linear(text_hidden_size, num_classes)\n        self.audio_classifier = nn.Linear(audio_size, num_classes)\n        self.vision_classifier = nn.Linear(vision_size, num_classes)\n        \n        # Feature projectors for ML fusion\n        self.text_projector = nn.Linear(text_hidden_size, 50)\n        self.audio_projector = nn.Linear(audio_size, 30)\n        self.vision_projector = nn.Linear(vision_size, 30)\n        \n    def forward(self, input_ids, attention_mask, audio_feature, vision_feature):\n        # Process text\n        text_output = self.text_model(input_ids=input_ids, attention_mask=attention_mask)\n        text_cls = text_output.last_hidden_state[:, 0, :]  # [CLS] token embedding\n        \n        # Get predictions from each modality\n        text_pred = self.text_classifier(text_cls)\n        audio_pred = self.audio_classifier(audio_feature)\n        vision_pred = self.vision_classifier(vision_feature)\n        \n        # Get projected features for ML fusion\n        text_features = self.text_projector(text_cls)\n        audio_features = self.audio_projector(audio_feature)\n        vision_features = self.vision_projector(vision_feature)\n        \n        return text_pred, audio_pred, vision_pred, text_features, audio_features, vision_features","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:27.694010Z","iopub.execute_input":"2025-02-20T23:48:27.694276Z","iopub.status.idle":"2025-02-20T23:48:27.706630Z","shell.execute_reply.started":"2025-02-20T23:48:27.694249Z","shell.execute_reply":"2025-02-20T23:48:27.705942Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"# Helper function to train models\ndef train_model(model, train_loader, val_loader, criterion, optimizer, num_epochs, model_type=\"weighted\"):\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    print(f\"Using device: {device}\")\n    \n    model.to(device)\n    best_val_acc = 0.0\n    history = {'train_loss': [], 'train_acc': [], 'val_loss': [], 'val_acc': []}\n    \n    for epoch in range(num_epochs):\n        # Training phase\n        model.train()\n        train_loss = 0.0\n        train_correct = 0\n        total_samples = 0\n        \n        for batch in train_loader:\n            input_ids = batch['input_ids'].to(device)\n            attention_mask = batch['attention_mask'].to(device)\n            audio_feature = batch['audio_feature'].to(device)\n            vision_feature = batch['vision_feature'].to(device)\n            labels = batch['label'].to(device)\n            \n            optimizer.zero_grad()\n            \n            if model_type == \"weighted\":\n                outputs, _, _, _, weights = model(input_ids, attention_mask, audio_feature, vision_feature)\n                loss = criterion(outputs, labels)\n            elif model_type == \"deep\":\n                outputs = model(input_ids, attention_mask, audio_feature, vision_feature)\n                loss = criterion(outputs, labels)\n            \n            loss.backward()\n            optimizer.step()\n            \n            train_loss += loss.item() * input_ids.size(0)\n            \n            _, predicted = torch.max(outputs, 1)\n            train_correct += (predicted == labels).sum().item()\n            total_samples += labels.size(0)\n        \n        train_loss = train_loss / len(train_loader.dataset)\n        train_acc = train_correct / total_samples\n        \n        # Validation phase\n        model.eval()\n        val_loss = 0.0\n        val_preds = []\n        val_labels = []\n        \n        with torch.no_grad():\n            for batch in val_loader:\n                input_ids = batch['input_ids'].to(device)\n                attention_mask = batch['attention_mask'].to(device)\n                audio_feature = batch['audio_feature'].to(device)\n                vision_feature = batch['vision_feature'].to(device)\n                labels = batch['label'].to(device)\n                \n                if model_type == \"weighted\":\n                    outputs, _, _, _, _ = model(input_ids, attention_mask, audio_feature, vision_feature)\n                elif model_type == \"deep\":\n                    outputs = model(input_ids, attention_mask, audio_feature, vision_feature)\n                \n                loss = criterion(outputs, labels)\n                val_loss += loss.item() * input_ids.size(0)\n                \n                _, predicted = torch.max(outputs, 1)\n                val_preds.extend(predicted.cpu().numpy())\n                val_labels.extend(labels.cpu().numpy())\n            \n        val_loss = val_loss / len(val_loader.dataset)\n        val_acc = accuracy_score(val_labels, val_preds)\n        \n        # Save history\n        history['train_loss'].append(train_loss)\n        history['train_acc'].append(train_acc)\n        history['val_loss'].append(val_loss)\n        history['val_acc'].append(val_acc)\n        \n        print(f'Epoch {epoch+1}/{num_epochs}:')\n        print(f'  Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.4f}')\n        print(f'  Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.4f}')\n        \n        if model_type == \"weighted\":\n            print(f'  Modality Weights: Text={weights[0]:.2f}, Audio={weights[1]:.2f}, Vision={weights[2]:.2f}')\n        \n        # Save best model\n        if val_acc > best_val_acc:\n            best_val_acc = val_acc\n            torch.save(model.state_dict(), f'best_{model_type}_fusion_model.pt')\n            \n    return model, history","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:27.707451Z","iopub.execute_input":"2025-02-20T23:48:27.707667Z","iopub.status.idle":"2025-02-20T23:48:27.721462Z","shell.execute_reply.started":"2025-02-20T23:48:27.707648Z","shell.execute_reply":"2025-02-20T23:48:27.720668Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"def extract_ml_fusion_features(model, data_loader):\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model.to(device)\n    model.eval()\n    \n    all_features = []\n    all_labels = []\n    all_modality_preds = []\n    \n    with torch.no_grad():\n        for batch in data_loader:\n            input_ids = batch['input_ids'].to(device)\n            attention_mask = batch['attention_mask'].to(device)\n            audio_feature = batch['audio_feature'].to(device)\n            vision_feature = batch['vision_feature'].to(device)\n            labels = batch['label'].to(device)\n            \n            text_pred, audio_pred, vision_pred, text_features, audio_features, vision_features = model(\n                input_ids, attention_mask, audio_feature, vision_feature)\n            \n            # Get predictions from each modality\n            _, text_pred_class = torch.max(text_pred, 1)\n            _, audio_pred_class = torch.max(audio_pred, 1)\n            _, vision_pred_class = torch.max(vision_pred, 1)\n            \n            # Convert to numpy for sklearn\n            text_features = text_features.cpu().numpy()\n            audio_features = audio_features.cpu().numpy()\n            vision_features = vision_features.cpu().numpy()\n            \n            text_pred_probs = torch.nn.functional.softmax(text_pred, dim=1).cpu().numpy()\n            audio_pred_probs = torch.nn.functional.softmax(audio_pred, dim=1).cpu().numpy()\n            vision_pred_probs = torch.nn.functional.softmax(vision_pred, dim=1).cpu().numpy()\n            \n            # Combine features for ML fusion\n            for i in range(len(labels)):\n                combined_features = np.concatenate([\n                    text_features[i], \n                    audio_features[i], \n                    vision_features[i],\n                    text_pred_probs[i], \n                    audio_pred_probs[i], \n                    vision_pred_probs[i],\n                    [text_pred_class[i].item(), audio_pred_class[i].item(), vision_pred_class[i].item()]\n                ])\n                \n                all_features.append(combined_features)\n                all_labels.append(labels[i].item())\n                \n                modality_preds = {\n                    'text': text_pred_class[i].item(),\n                    'audio': audio_pred_class[i].item(),\n                    'vision': vision_pred_class[i].item()\n                }\n                all_modality_preds.append(modality_preds)\n    \n    return np.array(all_features), np.array(all_labels), all_modality_preds","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:27.723416Z","iopub.execute_input":"2025-02-20T23:48:27.723628Z","iopub.status.idle":"2025-02-20T23:48:27.736570Z","shell.execute_reply.started":"2025-02-20T23:48:27.723610Z","shell.execute_reply":"2025-02-20T23:48:27.735762Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"def evaluate_model(model, test_loader, criterion, model_type=\"weighted\"):\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model.to(device)\n    model.eval()\n    \n    test_loss = 0.0\n    test_preds = []\n    test_labels = []\n    \n    with torch.no_grad():\n        for batch in test_loader:\n            input_ids = batch['input_ids'].to(device)\n            attention_mask = batch['attention_mask'].to(device)\n            audio_feature = batch['audio_feature'].to(device)\n            vision_feature = batch['vision_feature'].to(device)\n            labels = batch['label'].to(device)\n            \n            if model_type == \"weighted\":\n                outputs, _, _, _, _ = model(input_ids, attention_mask, audio_feature, vision_feature)\n            elif model_type == \"deep\":\n                outputs = model(input_ids, attention_mask, audio_feature, vision_feature)\n            \n            loss = criterion(outputs, labels)\n            test_loss += loss.item() * input_ids.size(0)\n            \n            _, predicted = torch.max(outputs, 1)\n            test_preds.extend(predicted.cpu().numpy())\n            test_labels.extend(labels.cpu().numpy())\n    \n    test_loss = test_loss / len(test_loader.dataset)\n    test_acc = accuracy_score(test_labels, test_preds)\n    \n    print(f'Test Loss: {test_loss:.4f}, Test Acc: {test_acc:.4f}')\n    print('\\nClassification Report:')\n    print(classification_report(test_labels, test_preds, target_names=['Negative', 'Neutral', 'Positive']))\n    \n    return test_loss, test_acc, test_preds, test_labels","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:27.737475Z","iopub.execute_input":"2025-02-20T23:48:27.737681Z","iopub.status.idle":"2025-02-20T23:48:27.748516Z","shell.execute_reply.started":"2025-02-20T23:48:27.737663Z","shell.execute_reply":"2025-02-20T23:48:27.747746Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"# Plot training history\ndef plot_training_history(history, model_type):\n    plt.figure(figsize=(12, 5))\n    \n    plt.subplot(1, 2, 1)\n    plt.plot(history['train_loss'], label='Train Loss')\n    plt.plot(history['val_loss'], label='Val Loss')\n    plt.title(f'{model_type} Fusion - Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    \n    plt.subplot(1, 2, 2)\n    plt.plot(history['train_acc'], label='Train Acc')\n    plt.plot(history['val_acc'], label='Val Acc')\n    plt.title(f'{model_type} Fusion - Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.legend()\n    \n    plt.tight_layout()\n    plt.savefig(f'{model_type}_fusion_history.png')\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:27.749325Z","iopub.execute_input":"2025-02-20T23:48:27.749598Z","iopub.status.idle":"2025-02-20T23:48:27.763205Z","shell.execute_reply.started":"2025-02-20T23:48:27.749567Z","shell.execute_reply":"2025-02-20T23:48:27.762418Z"}},"outputs":[],"execution_count":30},{"cell_type":"markdown","source":"<div style=\"background: linear-gradient(135deg, #20B2AA, #008B8B); padding: 15px; text-align: center; color: white; border-radius: 10px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3), inset 0px 0px 10px rgba(255, 255, 255, 0.2); margin-top: 20px;\">\n  <p style=\"font-size: 24px; font-weight: bold; font-family: 'Poppins', sans-serif; text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.4);\">\n    🚀 Training the Fusion Models\n  </p>\n</div>","metadata":{}},{"cell_type":"code","source":"def main(data):\n    tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')\n    train_dataset = MultimodalSentimentDataset(data['train'], tokenizer)\n    val_dataset = MultimodalSentimentDataset(data['valid'], tokenizer)\n    test_dataset = MultimodalSentimentDataset(data['test'], tokenizer)\n\n    train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n    val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE)\n    test_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE)\n    \n    text_model = DistilBertModel.from_pretrained('distilbert-base-uncased')\n    \n    for param in text_model.parameters():\n        param.requires_grad = False\n    \n    results = {}\n    \n    # Method 1: Weighted Average Fusion\n    print(\"\\n===== Training Weighted Average Fusion Model =====\")\n    weighted_model = WeightedAverageFusion(\n        text_model=text_model,\n        text_hidden_size=TEXT_HIDDEN_SIZE,\n        audio_size=AUDIO_FEATURE_SIZE,\n        vision_size=VISION_FEATURE_SIZE,\n        num_classes=NUM_CLASSES\n    )\n    \n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.Adam(weighted_model.parameters(), lr=LEARNING_RATE)\n    \n    weighted_model, weighted_history = train_model(\n        model=weighted_model,\n        train_loader=train_loader,\n        val_loader=val_loader,\n        criterion=criterion,\n        optimizer=optimizer,\n        num_epochs=NUM_EPOCHS,\n        model_type=\"weighted\"\n    )\n    \n    # Load best model\n    weighted_model.load_state_dict(torch.load('best_weighted_fusion_model.pt'))\n    weighted_loss, weighted_acc, weighted_preds, weighted_labels = evaluate_model(\n        model=weighted_model,\n        test_loader=test_loader,\n        criterion=criterion,\n        model_type=\"weighted\"\n    )\n    \n    plot_training_history(weighted_history, \"Weighted\")\n    results['weighted'] = {'acc': weighted_acc, 'loss': weighted_loss}\n    \n    # Method 2: ML Fusion (Random Forest)\n    print(\"\\n===== Training ML Fusion Model =====\")\n    ml_feature_extractor = MLFusionFeatureExtractor(\n        text_model=text_model,\n        text_hidden_size=TEXT_HIDDEN_SIZE,\n        audio_size=AUDIO_FEATURE_SIZE,\n        vision_size=VISION_FEATURE_SIZE,\n        num_classes=NUM_CLASSES\n    )\n    \n    # Extract features\n    print(\"Extracting features for ML fusion...\")\n    train_features, train_labels, _ = extract_ml_fusion_features(ml_feature_extractor, train_loader)\n    val_features, val_labels, _ = extract_ml_fusion_features(ml_feature_extractor, val_loader)\n    test_features, test_labels, test_modality_preds = extract_ml_fusion_features(ml_feature_extractor, test_loader)\n    \n    # Train Random Forest classifier\n    print(\"Training Random Forest classifier...\")\n    rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n    rf_classifier.fit(train_features, train_labels)\n    \n    # Evaluate ML fusion\n    rf_preds = rf_classifier.predict(test_features)\n    rf_acc = accuracy_score(test_labels, rf_preds)\n    \n    print(f\"ML Fusion Test Accuracy: {rf_acc:.4f}\")\n    print('\\nClassification Report:')\n    print(classification_report(test_labels, rf_preds, target_names=['Negative', 'Neutral', 'Positive']))\n    \n    # Compare with individual modalities\n    modality_accuracies = {\n        'text': accuracy_score(test_labels, [pred['text'] for pred in test_modality_preds]),\n        'audio': accuracy_score(test_labels, [pred['audio'] for pred in test_modality_preds]),\n        'vision': accuracy_score(test_labels, [pred['vision'] for pred in test_modality_preds])\n    }\n    \n    print(\"\\nIndividual Modality Accuracies:\")\n    for modality, acc in modality_accuracies.items():\n        print(f\"  {modality.capitalize()}: {acc:.4f}\")\n    \n    results['ml'] = {'acc': rf_acc}\n    \n    # Method 3: Deep Learning Fusion\n    print(\"\\n===== Training Deep Learning Fusion Model =====\")\n    deep_model = DeepFusionNetwork(\n        text_model=text_model,\n        text_hidden_size=TEXT_HIDDEN_SIZE,\n        audio_size=AUDIO_FEATURE_SIZE,\n        vision_size=VISION_FEATURE_SIZE,\n        fusion_hidden=FUSION_HIDDEN_SIZE,\n        num_classes=NUM_CLASSES\n    )\n    \n    optimizer = optim.Adam(deep_model.parameters(), lr=LEARNING_RATE)\n    \n    deep_model, deep_history = train_model(\n        model=deep_model,\n        train_loader=train_loader,\n        val_loader=val_loader,\n        criterion=criterion,\n        optimizer=optimizer,\n        num_epochs=NUM_EPOCHS,\n        model_type=\"deep\"\n    )\n    \n    # Load best model\n    deep_model.load_state_dict(torch.load('best_deep_fusion_model.pt'))\n    deep_loss, deep_acc, deep_preds, deep_labels = evaluate_model(\n        model=deep_model,\n        test_loader=test_loader,\n        criterion=criterion,\n        model_type=\"deep\"\n    )\n    \n    plot_training_history(deep_history, \"Deep\")\n    results['deep'] = {'acc': deep_acc, 'loss': deep_loss}\n    \n    # Compare all methods\n    print(\"\\n===== Comparison of All Fusion Methods =====\")\n    for method, metrics in results.items():\n        print(f\"{method.capitalize()} Fusion Accuracy: {metrics['acc']:.4f}\")\n    \n    return results","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T23:48:27.764026Z","iopub.execute_input":"2025-02-20T23:48:27.764278Z","iopub.status.idle":"2025-02-20T23:48:27.776929Z","shell.execute_reply.started":"2025-02-20T23:48:27.764252Z","shell.execute_reply":"2025-02-20T23:48:27.776192Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"results = main(data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-21T00:37:52.363479Z","iopub.execute_input":"2025-02-21T00:37:52.363835Z","iopub.status.idle":"2025-02-21T01:48:22.177038Z","shell.execute_reply.started":"2025-02-21T00:37:52.363779Z","shell.execute_reply":"2025-02-21T01:48:22.176162Z"}},"outputs":[{"name":"stdout","text":"\n===== Training Weighted Average Fusion Model =====\nUsing device: cuda\nEpoch 1/25:\n  Train Loss: 2.3688, Train Acc: 0.4610\n  Val Loss: 1.5352, Val Acc: 0.4062\n  Modality Weights: Text=0.36, Audio=0.31, Vision=0.33\nEpoch 2/25:\n  Train Loss: 1.3066, Train Acc: 0.4448\n  Val Loss: 1.2471, Val Acc: 0.4367\n  Modality Weights: Text=0.37, Audio=0.30, Vision=0.33\nEpoch 3/25:\n  Train Loss: 1.0869, Train Acc: 0.4991\n  Val Loss: 1.0503, Val Acc: 0.4960\n  Modality Weights: Text=0.37, Audio=0.30, Vision=0.33\nEpoch 4/25:\n  Train Loss: 0.9614, Train Acc: 0.5567\n  Val Loss: 0.9583, Val Acc: 0.5505\n  Modality Weights: Text=0.37, Audio=0.30, Vision=0.33\nEpoch 5/25:\n  Train Loss: 0.9086, Train Acc: 0.5940\n  Val Loss: 0.9201, Val Acc: 0.5697\n  Modality Weights: Text=0.37, Audio=0.30, Vision=0.33\nEpoch 6/25:\n  Train Loss: 0.8830, Train Acc: 0.6115\n  Val Loss: 0.8997, Val Acc: 0.5831\n  Modality Weights: Text=0.38, Audio=0.30, Vision=0.32\nEpoch 7/25:\n  Train Loss: 0.8648, Train Acc: 0.6189\n  Val Loss: 0.8844, Val Acc: 0.5943\n  Modality Weights: Text=0.38, Audio=0.30, Vision=0.32\nEpoch 8/25:\n  Train Loss: 0.8511, Train Acc: 0.6255\n  Val Loss: 0.8702, Val Acc: 0.6056\n  Modality Weights: Text=0.39, Audio=0.30, Vision=0.31\nEpoch 9/25:\n  Train Loss: 0.8391, Train Acc: 0.6295\n  Val Loss: 0.8573, Val Acc: 0.6173\n  Modality Weights: Text=0.40, Audio=0.29, Vision=0.31\nEpoch 10/25:\n  Train Loss: 0.8281, Train Acc: 0.6368\n  Val Loss: 0.8575, Val Acc: 0.6136\n  Modality Weights: Text=0.41, Audio=0.29, Vision=0.30\nEpoch 11/25:\n  Train Loss: 0.8193, Train Acc: 0.6391\n  Val Loss: 0.8389, Val Acc: 0.6275\n  Modality Weights: Text=0.42, Audio=0.29, Vision=0.29\nEpoch 12/25:\n  Train Loss: 0.8100, Train Acc: 0.6446\n  Val Loss: 0.8320, Val Acc: 0.6301\n  Modality Weights: Text=0.43, Audio=0.28, Vision=0.29\nEpoch 13/25:\n  Train Loss: 0.8038, Train Acc: 0.6466\n  Val Loss: 0.8244, Val Acc: 0.6334\n  Modality Weights: Text=0.44, Audio=0.28, Vision=0.28\nEpoch 14/25:\n  Train Loss: 0.7987, Train Acc: 0.6476\n  Val Loss: 0.8203, Val Acc: 0.6323\n  Modality Weights: Text=0.45, Audio=0.27, Vision=0.27\nEpoch 15/25:\n  Train Loss: 0.7948, Train Acc: 0.6525\n  Val Loss: 0.8150, Val Acc: 0.6403\n  Modality Weights: Text=0.46, Audio=0.27, Vision=0.27\nEpoch 16/25:\n  Train Loss: 0.7891, Train Acc: 0.6514\n  Val Loss: 0.8120, Val Acc: 0.6414\n  Modality Weights: Text=0.47, Audio=0.26, Vision=0.26\nEpoch 17/25:\n  Train Loss: 0.7839, Train Acc: 0.6577\n  Val Loss: 0.8064, Val Acc: 0.6430\n  Modality Weights: Text=0.48, Audio=0.26, Vision=0.26\nEpoch 18/25:\n  Train Loss: 0.7812, Train Acc: 0.6550\n  Val Loss: 0.8062, Val Acc: 0.6435\n  Modality Weights: Text=0.49, Audio=0.25, Vision=0.25\nEpoch 19/25:\n  Train Loss: 0.7765, Train Acc: 0.6580\n  Val Loss: 0.8006, Val Acc: 0.6440\n  Modality Weights: Text=0.50, Audio=0.25, Vision=0.25\nEpoch 20/25:\n  Train Loss: 0.7762, Train Acc: 0.6612\n  Val Loss: 0.7977, Val Acc: 0.6451\n  Modality Weights: Text=0.51, Audio=0.24, Vision=0.24\nEpoch 21/25:\n  Train Loss: 0.7753, Train Acc: 0.6581\n  Val Loss: 0.7968, Val Acc: 0.6462\n  Modality Weights: Text=0.52, Audio=0.24, Vision=0.24\nEpoch 22/25:\n  Train Loss: 0.7713, Train Acc: 0.6623\n  Val Loss: 0.7929, Val Acc: 0.6521\n  Modality Weights: Text=0.53, Audio=0.24, Vision=0.24\nEpoch 23/25:\n  Train Loss: 0.7684, Train Acc: 0.6643\n  Val Loss: 0.7953, Val Acc: 0.6510\n  Modality Weights: Text=0.53, Audio=0.23, Vision=0.23\nEpoch 24/25:\n  Train Loss: 0.7684, Train Acc: 0.6621\n  Val Loss: 0.7901, Val Acc: 0.6569\n  Modality Weights: Text=0.54, Audio=0.23, Vision=0.23\nEpoch 25/25:\n  Train Loss: 0.7654, Train Acc: 0.6659\n  Val Loss: 0.7917, Val Acc: 0.6553\n  Modality Weights: Text=0.55, Audio=0.23, Vision=0.23\n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-31-801f575e4244>:48: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  weighted_model.load_state_dict(torch.load('best_weighted_fusion_model.pt'))\n","output_type":"stream"},{"name":"stdout","text":"Test Loss: 0.7765, Test Acc: 0.6615\n\nClassification Report:\n              precision    recall  f1-score   support\n\n    Negative       0.67      0.70      0.69      1350\n     Neutral       0.50      0.23      0.32      1025\n    Positive       0.69      0.83      0.75      2284\n\n    accuracy                           0.66      4659\n   macro avg       0.62      0.59      0.58      4659\nweighted avg       0.64      0.66      0.64      4659\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\n===== Training ML Fusion Model =====\nExtracting features for ML fusion...\nTraining Random Forest classifier...\nML Fusion Test Accuracy: 0.6049\n\nClassification Report:\n              precision    recall  f1-score   support\n\n    Negative       0.64      0.53      0.58      1350\n     Neutral       0.52      0.08      0.14      1025\n    Positive       0.60      0.89      0.71      2284\n\n    accuracy                           0.60      4659\n   macro avg       0.58      0.50      0.48      4659\nweighted avg       0.59      0.60      0.55      4659\n\n\nIndividual Modality Accuracies:\n  Text: 0.2194\n  Audio: 0.4681\n  Vision: 0.2956\n\n===== Training Deep Learning Fusion Model =====\nUsing device: cuda\nEpoch 1/25:\n  Train Loss: 0.9890, Train Acc: 0.5329\n  Val Loss: 0.8613, Val Acc: 0.6157\nEpoch 2/25:\n  Train Loss: 0.8397, Train Acc: 0.6308\n  Val Loss: 0.8219, Val Acc: 0.6323\nEpoch 3/25:\n  Train Loss: 0.8130, Train Acc: 0.6428\n  Val Loss: 0.8121, Val Acc: 0.6371\nEpoch 4/25:\n  Train Loss: 0.7906, Train Acc: 0.6542\n  Val Loss: 0.7995, Val Acc: 0.6483\nEpoch 5/25:\n  Train Loss: 0.7804, Train Acc: 0.6557\n  Val Loss: 0.8072, Val Acc: 0.6499\nEpoch 6/25:\n  Train Loss: 0.7768, Train Acc: 0.6572\n  Val Loss: 0.7911, Val Acc: 0.6542\nEpoch 7/25:\n  Train Loss: 0.7674, Train Acc: 0.6658\n  Val Loss: 0.7817, Val Acc: 0.6638\nEpoch 8/25:\n  Train Loss: 0.7615, Train Acc: 0.6676\n  Val Loss: 0.7872, Val Acc: 0.6558\nEpoch 9/25:\n  Train Loss: 0.7584, Train Acc: 0.6680\n  Val Loss: 0.7825, Val Acc: 0.6569\nEpoch 10/25:\n  Train Loss: 0.7536, Train Acc: 0.6713\n  Val Loss: 0.7809, Val Acc: 0.6627\nEpoch 11/25:\n  Train Loss: 0.7523, Train Acc: 0.6705\n  Val Loss: 0.7774, Val Acc: 0.6611\nEpoch 12/25:\n  Train Loss: 0.7477, Train Acc: 0.6707\n  Val Loss: 0.7866, Val Acc: 0.6505\nEpoch 13/25:\n  Train Loss: 0.7446, Train Acc: 0.6759\n  Val Loss: 0.7863, Val Acc: 0.6462\nEpoch 14/25:\n  Train Loss: 0.7422, Train Acc: 0.6746\n  Val Loss: 0.7834, Val Acc: 0.6515\nEpoch 15/25:\n  Train Loss: 0.7398, Train Acc: 0.6790\n  Val Loss: 0.7835, Val Acc: 0.6547\nEpoch 16/25:\n  Train Loss: 0.7350, Train Acc: 0.6782\n  Val Loss: 0.7812, Val Acc: 0.6601\nEpoch 17/25:\n  Train Loss: 0.7291, Train Acc: 0.6799\n  Val Loss: 0.7833, Val Acc: 0.6579\nEpoch 18/25:\n  Train Loss: 0.7283, Train Acc: 0.6803\n  Val Loss: 0.7797, Val Acc: 0.6579\nEpoch 19/25:\n  Train Loss: 0.7217, Train Acc: 0.6867\n  Val Loss: 0.7878, Val Acc: 0.6553\nEpoch 20/25:\n  Train Loss: 0.7237, Train Acc: 0.6870\n  Val Loss: 0.7772, Val Acc: 0.6611\nEpoch 21/25:\n  Train Loss: 0.7179, Train Acc: 0.6898\n  Val Loss: 0.7844, Val Acc: 0.6579\nEpoch 22/25:\n  Train Loss: 0.7170, Train Acc: 0.6901\n  Val Loss: 0.7899, Val Acc: 0.6627\nEpoch 23/25:\n  Train Loss: 0.7130, Train Acc: 0.6890\n  Val Loss: 0.8024, Val Acc: 0.6558\nEpoch 24/25:\n  Train Loss: 0.7081, Train Acc: 0.6938\n  Val Loss: 0.7849, Val Acc: 0.6606\nEpoch 25/25:\n  Train Loss: 0.7053, Train Acc: 0.6947\n  Val Loss: 0.7839, Val Acc: 0.6633\n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-31-801f575e4244>:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  deep_model.load_state_dict(torch.load('best_deep_fusion_model.pt'))\n","output_type":"stream"},{"name":"stdout","text":"Test Loss: 0.7644, Test Acc: 0.6639\n\nClassification Report:\n              precision    recall  f1-score   support\n\n    Negative       0.70      0.68      0.69      1350\n     Neutral       0.47      0.27      0.35      1025\n    Positive       0.69      0.83      0.75      2284\n\n    accuracy                           0.66      4659\n   macro avg       0.62      0.59      0.60      4659\nweighted avg       0.64      0.66      0.65      4659\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\n===== Comparison of All Fusion Methods =====\nWeighted Fusion Accuracy: 0.6615\nMl Fusion Accuracy: 0.6049\nDeep Fusion Accuracy: 0.6639\n","output_type":"stream"}],"execution_count":35}]}